apiVersion: v1
kind: Secret
metadata:
  name: test-nginx-secret
  namespace: test-nginx
type: Opaque
stringData:
    NGINX_CONF_KEY: |
        # nginx.conf  --  docker-openresty
        #
        # This file is installed to:
        #   `/usr/local/openresty/nginx/conf/nginx.conf`
        # and is the file loaded by nginx at startup,
        # unless the user specifies otherwise.
        #
        # It tracks the upstream OpenResty's `nginx.conf`, but removes the `server`
        # section and adds this directive:
        #     `include /etc/nginx/conf.d/*.conf;`
        #
        # The `docker-openresty` file `nginx.vh.default.conf` is copied to
        # `/etc/nginx/conf.d/default.conf`.  It contains the `server section
        # of the upstream `nginx.conf`.
        #
        # See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
        #

        #user  nobody;
        #worker_processes 1;

        # Enables the use of JIT for regular expressions to speed-up their processing.
        pcre_jit on;

        error_log     /var/log/nginx/error.log warn;

        #pid        logs/nginx.pid;

        worker_rlimit_nofile 65535;

        events {
            worker_connections  1024;
            use                 epoll;
            epoll_events        512;
        }


        http {
            include       mime.types;
            default_type  application/octet-stream;

            sendfile           on;
            keepalive_timeout  30s;
            keepalive_requests 30;
            send_timeout       30s;
            server_tokens      off;

            access_log    /var/log/nginx/access.log combined;

            client_body_temp_path /var/run/openresty/nginx-client-body;
            proxy_temp_path       /var/run/openresty/nginx-proxy;
            fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
            uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
            scgi_temp_path        /var/run/openresty/nginx-scgi;

            sendfile        on;
            #tcp_nopush     on;

            gzip  off;

            lua_shared_dict discovery 1m;
            lua_shared_dict sessions 10m;
            lua_package_path '~/lua/?.lua;;';

            include /etc/nginx/conf.d/*.conf;

        }
    APP_CONF_KEY : |
        server {

            listen 4321;

            resolver kube-dns.kube-system.svc.cluster.local;

            #######################################################
            # Managing SSO
            #######################################################

            #access_by_lua '
            #    local opts = {
            #        redirect_uri_path = "/redirect_uri",
            #        accept_none_alg = true,
            #        discovery = "https://keycloak.kube.local/realms/sso/.well-known/openid-configuration",
            #        client_id = "simple",
            #        client_secret = "4JT8WpmxVzXd0sRikHg82Zn5qiQXlBzC",
            #        redirect_uri_scheme = "https",
            #        logout_path = "/logout",
            #        redirect_after_logout_uri = "https://keycloak.kube.local/realms/sso/protocol/openid-connect/logout?redirect_uri=http://simple.kube.local/",
            #        redirect_after_logout_with_id_token_hint = false,
            #        session_contents = {id_token=true}
            #    }
            #    -- call introspect for OAuth 2.0 Bearer Access Token validation
            #    local res, err = require("resty.openidc").authenticate(opts)
            #    if err then
            #        ngx.status = 403
            #        ngx.say(err)
            #        ngx.exit(ngx.HTTP_FORBIDDEN)
            #    end
            #    ngx.req.set_header("X-USER", res.id_token.sub)
            #';



            #######################################################
            # Managing PROXY
            #######################################################

             proxy_send_timeout      120;
             proxy_read_timeout      300;
             proxy_buffering         off;
             proxy_request_buffering off;
             keepalive_timeout       5 5;
             tcp_nodelay             on;
             # allow large uploads of files - refer to nginx documentation
             client_max_body_size   1G;

             add_header Access-Control-Allow-Origin '*';
             add_header Access-Control-Allow-Methods '*';
             add_header Access-Control-Allow-Headers '*';

             proxy_buffer_size          128k;
             proxy_buffers              4 256k;
             proxy_busy_buffers_size    256k;

             proxy_set_header Host               $host;
             proxy_set_header X-Real-IP          $remote_addr;
             proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto  $scheme;
             proxy_set_header Cookie             $http_cookie;
             proxy_set_header X-Forwarded-Host   $host;
             proxy_set_header X-Forwarded-Server $host;

            #######################################################
            # Managing LOCATIONS
            #######################################################

             location = /status {
                 access_log off;
                 default_type text/plain;
                 add_header Content-Type text/plain;
                 return 200 "alive";
             }

             location / {
                gzip off;
                root /usr/share/nginx/html/;
                index  index.html;
            }

        }

    APP_HTML_KEY : |
        <!DOCTYPE html>
        <html lang="en">
            <head>
                <title>Simple static website with NGINX</title>
            </head>
            <body>
                WELCOME, IT ROCKS (SSO) !!
            </body>
        </html>
